#!/usr/bin/env sh

# shellcheck shell=dash
# This script assumes at least `local` extension is enabled.

# Lock file used when installing packages
readonly DOTFILE_LOCKFILE_NAME="dotfile.lock"

readonly DOTFILE_DEBUG=${DEBUG:-0}
readonly DOTFILE_LOG_LEVEL=${LOG_LEVEL:-2}

# XDG base directories
readonly XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
readonly XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}

# Color constants
readonly BLACK=$(tput setaf 0)
readonly RED=$(tput setaf 1)
readonly GREEN=$(tput setaf 2)
readonly YELLOW=$(tput setaf 3)
readonly BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly CYAN=$(tput setaf 6)
readonly WHITE=$(tput setaf 7)

# Text style constants
readonly BOLD=$(tput bold)
readonly UNDERLINE=$(tput smul)
readonly BLINK=$(tput blink)

# Reset test to normal style
readonly NORMAL=$(tput sgr0)

debug() {
    [ "$DOTFILE_DEBUG" -ne 0 ] || [ "$DOTFILE_LOG_LEVEL" -lt 3 ] && return
    printf "[${BOLD}${WHITE}DEBUG${NORMAL}] ${WHITE}%s${NORMAL}\n" "$@" >&2
}

info() {
    [ "$DOTFILE_LOG_LEVEL" -lt 2 ] && return
    printf "[${BOLD}${BLUE}INFO${NORMAL}] ${WHITE}%s${NORMAL}\n" "$@" >&2
}

warn() {
    [ "$DOTFILE_LOG_LEVEL" -lt 1 ] && return
    printf "[${BOLD}${YELLOW}WARNING${NORMAL}] ${WHITE}%s${NORMAL}\n" "$@" >&2
}

error() {
    printf "[${BOLD}${RED}ERROR${NORMAL}] ${WHITE}%s${NORMAL}\n" "$@" >&2
}

################################

## Dependency list creator
depends() {
    # Syntax: depends <src> <packages>...
    #   <src> can be `native`, `dotfile`, `pip`, `gem`, etc.
    
    local src package arrayname
    src="$1"
    package="$2"
    shift 2

    # Allow packages from arbitrary sources
    arrayname="depends_$src"
    append "$package" to "$arrayname"
    
    # If there are more than one packages, recursively add more
    [ $# -ne 0 ] && depends "$src" "$@"
}

## Append one item to a space-separated list
append() {
    # Syntax: append <item> to <array>
    if [ $# -ne 3 ]; then
        error "Usage: append <item> to <array>"
        exit 1
    fi

    local array item
    item=$1
    array=$3

    eval "$array=\"\${$array} $item\""
}

## Install native package dependencies
install_native() {
    info "Installing native package dependencies..."
    info "You might need to provide your sudo credential here."
    # TODO: support other platforms as well
    sudo pacman -Sy "$@"
}

## Install dotfile package dependencies
install_dotfile() {
    info "Installing dotfile dependencies..."
    for pkg in $depends_dotfile; do
        dotfile_install "$pkg"
    done
}

## Ensure a command succeeds
ensure() {
    if ! "$@"; then
        error "Command failed: $*"
        error "This command is required. Cannot proceed..."
        exit 1
    fi  
}

## Check if specified command exists
is_command() {
    command -v "$1" > /dev/null
}

## Check if specified file exists
is_file() {
    [ -e "$1" ]
}

## Check if specified directory exists
is_directory() {
    [ -d "$1" ]
}

## Check if specified symbolic link exists
is_symlink() {
    [ -L "$1" ]
}

################################

usage() {
    cat 1>&2 <<EOF
USAGE:
    $(basename "$0") <command>

COMMANDS:
    init         Initializes this machine.
    install      Installs a package to this machine.
    uninstall    Uninstalls a package from this machine.
    update       Updates the repository to the most recent version.
    remove       Remove all packages and try to make as clean as possible.
    shell        Create a REPL instance. Useful when debugging functions.
    help         Displays this help message.
EOF
}

dotfile_init() {
    # Initialization routine
    # Things to do:
    # 1. Create configuration file $XDG_CONFIG_HOME/dotfile.conf
    # 2. Create package folder $XDG_DATA_HOME/dotfile/
    # 3. Verify all necessary binaries are here (git, stow, etc.)
    # 4. Symbolic link itself to ~/.local/bin

    # Create basic configuration file
    if ! is_file "$XDG_CONFIG_HOME/dotfile.conf"; then
        info "Dotfile configuration file is not found. Creating..."
        ensure mkdir -p "$XDG_CONFIG_HOME"
        ensure touch "$XDG_CONFIG_HOME/dotfile.conf"

        info "Setting dotfile home directory as:"
        echo "dotfile_home=$(dirname "$(realpath "$0")")" \
            | ensure tee "$XDG_CONFIG_HOME/dotfile.conf" \
            1>&2
    fi

    # Create directory where package data will be stored
    if ! is_directory "$XDG_DATA_HOME/dotfile"; then
        info "Dotfile package storage is not found. Creating..."
        ensure mkdir -p "$XDG_DATA_HOME/dotfile"
    fi

    # git is required to update packages
    if ! is_command git; then
        info "git does not exist. Attempting to install..."
        ensure install_native git
    fi

    # stow is required to make symbolic links
    if ! is_command stow; then
        info "stow does not exist. Attempting to install..."
        ensure install_native stow
    fi
    
    # This script is going to be installed in local PATH
    if ! is_symlink "$HOME/.local/bin/dotfile"; then
        info "Installing dotfile binary to local binary directory..."
        ensure mkdir -p "$HOME/.local/bin"
        ensure ln -s "$(realpath "$0")" "$HOME/.local/bin/dotfile"
    fi
}

dotfile_install() {
    error "This feature is not implemented yet."
    return
}

dotfile_uninstall() {
    error "This feature is not implemented yet."
    return
}

dotfile_update() {
    error "This feature is not implemented yet."
    return
}

dotfile_remove() {
    error "This feature is not implemented yet."
    return
}

dotfile_shell() {
    if [ "$DOTFILE_DEBUG" -eq 0 ]; then
        error "Opening shell is not supported if DEBUG environment variable is not set!"
        exit 1
    fi

    while true; do
        read -r -p "dotfile> " line

        [ "$line" = "exit" ] && break

        eval "$line"
    done
}

case "$1" in
    help)
        echo "dotfile -- automatic dotfile installer, because I am lazy as fuck"
        echo ""
        usage
        ;;

    init)
        dotfile_init
        ;;

    install)
        dotfile_install
        ;;

    uninstall)
        dotfile_uninstall
        ;;

    update)
        dotfile_update
        ;;

    remove)
        dotfile_remove
        ;;

    shell)
        dotfile_shell
        ;;

    "")
        error "You must supply at least one command!"
        usage
        ;;

    *)
        error "Unknown command: $1"
        usage
        ;;
esac

